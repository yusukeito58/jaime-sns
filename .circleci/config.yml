# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2.1 # We must use 2.1 to make use of orbs.
orbs: # specify all orbs you want to use.
  aws-code-deploy: circleci/aws-code-deploy@0.0.9
workflows:
  deploy_application:
    jobs:
      - aws-code-deploy/deploy:
          application-name: laravel-sns # The name of an AWS CodeDeploy application associated with the applicable IAM user or AWS account.
          deployment-group: master # The name of a new deployment group for the specified application.
          service-role-arn: arn:aws:iam::831132817655:user/laravel-sns-deploy # The service role for a deployment group.
          bundle-bucket: laravel-sns-code # The s3 bucket where an application revision will be stored.
          bundle-key: / # A key under the s3 bucket where an application revision will be stored.
          arguments: '--profile assume_role'
# jobs:
#   build:
#     docker:
#       # Specify the version you desire here
#       - image: circleci/php:7.2-stretch-node-browsers

#       # Specify service dependencies here if necessary
#       # CircleCI maintains a library of pre-built images
#       # documented at https://circleci.com/docs/2.0/circleci-images/
#       # Using the RAM variation mitigates I/O contention
#       # for database intensive operations.
#       # - image: circleci/mysql:5.7-ram
#       #
#       # - image: redis:3

#     steps:
#       - checkout

#       - run: sudo apt update && sudo apt install zlib1g-dev libsqlite3-dev
#       - run: sudo docker-php-ext-install zip

#       # Download and cache dependencies

#       # composer cache
#       - restore_cache:
#           keys:
#             # "composer.lock" can be used if it is committed to the repo
#             - v1-dependencies-{{ checksum "composer.json" }}
#             # fallback to using the latest cache if no exact match is found
#             - v1-dependencies-

#       - run: composer install -n --prefer-dist

#       - save_cache:
#           key: composer-v1-{{ checksum "composer.lock" }}
#           paths:
#             - vendor

#       # node cache

#       - restore_cache:
#           keys:
#             - node-v4-{{ checksum "package.json" }}
#             - node-v4-
#       - run: npm install
#       - save_cache:
#           key: node-v4-{{ checksum "package.json" }}
#           paths:
#             - node_modules
#             - ~/.yarn

#       # prepare the database
#       - run: touch storage/testing.sqlite
#       - run: php artisan migrate --env=testing --database=sqlite_testing --force

#       # run tests with phpunit or codecept
#       - run: ./vendor/bin/phpunit
#       # this example uses codecept but you're not limited to it
#       # - run: ./vendor/bin/codecept build
#       # - run: ./vendor/bin/codecept run --xml result.xml
#       - store_test_results:
#           path: tests/_output
#       - store_artifacts:
#           path: tests/_output
